package math

import (
	"math/big"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestMedian(t *testing.T) {
	var vals []*big.Int
	for _, val := range []int64{
		103918498181885, 106639304799412, 100455746984101, 102474269267841, 102387139652600, 102796956407721,
		107602532277810, 108482478742373, 101477425718511, 107848947883575, 100321557096689, 105118032891182,
		105418229750942, 104013313944249, 106725404113536, 100775432275318, 101112857874367, 103751836723599,
		104622459822283, 103647044153030, 107053928328249, 101503039842485, 102367803977042, 103481562313519,
	} {
		vals = append(vals, big.NewInt(val))
	}

	req := require.New(t)
	req.Equal(big.NewInt(103699440438314), Median(vals))
}

func TestMeanAbsoluteDeviation(t *testing.T) {
	var vals []*big.Int
	for _, val := range []int64{
		103918498181885, 106639304799412, 100455746984101, 102474269267841, 102387139652600, 102796956407721,
		107602532277810, 108482478742373, 101477425718511, 107848947883575, 100321557096689, 105118032891182,
		105418229750942, 104013313944249, 106725404113536, 100775432275318, 101112857874367, 103751836723599,
		104622459822283, 103647044153030, 107053928328249, 101503039842485, 102367803977042, 103481562313519,
	} {
		vals = append(vals, big.NewInt(val))
	}

	req := require.New(t)
	req.Equal(big.NewInt(1957594954228), MeanAbsoluteDeviation(vals))
}

func TestGetMeanAbsoluteDeviationOutliers(t *testing.T) {
	req := require.New(t)

	// 1st case: no outliers, uniform distribution from 100000000000000 to 101000000000000.
	var vals []*big.Int
	for _, val := range []int64{
		103918498181885, 106639304799412, 100455746984101, 102474269267841, 102387139652600, 102796956407721,
		107602532277810, 108482478742373, 101477425718511, 107848947883575, 100321557096689, 105118032891182,
		105418229750942, 104013313944249, 106725404113536, 100775432275318, 101112857874367, 103751836723599,
		104622459822283, 103647044153030, 107053928328249, 101503039842485, 102367803977042, 103481562313519,
	} {
		vals = append(vals, big.NewInt(val))
	}
	req.Equal([]int(nil), GetMeanAbsoluteDeviationOutliers(vals, 3))

	// 2nd case: 3 outliers (first 3 values), uniform distribution from 100000000000000 to 101000000000000.
	vals = []*big.Int{}
	for _, val := range []int64{
		120454958584045, 120541162473549, 120112725559953, 100338746662478, 100698641026430, 102796956407721,
		107602532277810, 108482478742373, 101477425718511, 107848947883575, 100321557096689, 105118032891182,
		105418229750942, 104013313944249, 106725404113536, 100775432275318, 101112857874367, 103751836723599,
		104622459822283, 103647044153030, 107053928328249, 101503039842485, 102367803977042, 103481562313519,
	} {
		vals = append(vals, big.NewInt(val))
	}
	req.Equal([]int{0, 1, 2}, GetMeanAbsoluteDeviationOutliers(vals, 3))
}
