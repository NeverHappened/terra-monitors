// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Validator validator
//
// swagger:model Validator
type Validator struct {

	// bond height
	// Example: 0
	BondHeight string `json:"bond_height,omitempty"`

	// bond intra tx counter
	// Example: 0
	BondIntraTxCounter int64 `json:"bond_intra_tx_counter,omitempty"`

	// commission
	Commission *ValidatorCommission `json:"commission,omitempty"`

	// consensus pubkey
	// Example: terravalconspub1zcjduepq7mft6gfls57a0a42d7uhx656cckhfvtrlmw744jv4q0mvlv0dypskehfk8
	ConsensusPubkey string `json:"consensus_pubkey,omitempty"`

	// delegator shares
	DelegatorShares string `json:"delegator_shares,omitempty"`

	// description
	Description *ValidatorDescription `json:"description,omitempty"`

	// jailed
	Jailed bool `json:"jailed,omitempty"`

	// operator address
	OperatorAddress ValidatorAddress `json:"operator_address,omitempty"`

	// status
	Status int64 `json:"status,omitempty"`

	// tokens
	Tokens string `json:"tokens,omitempty"`

	// unbonding height
	// Example: 0
	UnbondingHeight string `json:"unbonding_height,omitempty"`

	// unbonding time
	// Example: 1970-01-01T00:00:00Z
	UnbondingTime string `json:"unbonding_time,omitempty"`
}

// Validate validates this validator
func (m *Validator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Validator) validateCommission(formats strfmt.Registry) error {
	if swag.IsZero(m.Commission) { // not required
		return nil
	}

	if m.Commission != nil {
		if err := m.Commission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commission")
			}
			return err
		}
	}

	return nil
}

func (m *Validator) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

func (m *Validator) validateOperatorAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.OperatorAddress) { // not required
		return nil
	}

	if err := m.OperatorAddress.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("operator_address")
		}
		return err
	}

	return nil
}

// ContextValidate validate this validator based on the context it is used
func (m *Validator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCommission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperatorAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Validator) contextValidateCommission(ctx context.Context, formats strfmt.Registry) error {

	if m.Commission != nil {
		if err := m.Commission.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commission")
			}
			return err
		}
	}

	return nil
}

func (m *Validator) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

func (m *Validator) contextValidateOperatorAddress(ctx context.Context, formats strfmt.Registry) error {

	if err := m.OperatorAddress.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("operator_address")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Validator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Validator) UnmarshalBinary(b []byte) error {
	var res Validator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ValidatorCommission validator commission
//
// swagger:model ValidatorCommission
type ValidatorCommission struct {

	// max change rate
	// Example: 0
	MaxChangeRate string `json:"max_change_rate,omitempty"`

	// max rate
	// Example: 0
	MaxRate string `json:"max_rate,omitempty"`

	// rate
	// Example: 0
	Rate string `json:"rate,omitempty"`

	// update time
	// Example: 1970-01-01T00:00:00Z
	UpdateTime string `json:"update_time,omitempty"`
}

// Validate validates this validator commission
func (m *ValidatorCommission) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this validator commission based on context it is used
func (m *ValidatorCommission) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ValidatorCommission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidatorCommission) UnmarshalBinary(b []byte) error {
	var res ValidatorCommission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ValidatorDescription validator description
//
// swagger:model ValidatorDescription
type ValidatorDescription struct {

	// details
	Details string `json:"details,omitempty"`

	// identity
	Identity string `json:"identity,omitempty"`

	// moniker
	Moniker string `json:"moniker,omitempty"`

	// website
	Website string `json:"website,omitempty"`
}

// Validate validates this validator description
func (m *ValidatorDescription) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this validator description based on context it is used
func (m *ValidatorDescription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ValidatorDescription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidatorDescription) UnmarshalBinary(b []byte) error {
	var res ValidatorDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
